{"version":3,"sources":["SearchBar.js","apis/Youtube.js","videoItem.js","videoList.js","videosDetails.js","App.js","serviceWorker.js","index.js"],"names":["SeachBar","state","term","onInputChage","event","setState","target","value","onFormSubmit","preventDefault","props","className","onSubmit","this","type","onChange","placeholder","React","Component","axios","create","baseURL","params","part","maxresult","key","VideoItem","video","onVideoSelect","onClick","alt","snippet","title","src","thumbnails","medium","url","VideoList","videos","renderedList","map","id","videoId","VideoDetails","videoSrc","console","log","class","allowfullscreen","App","selectedVideo","onTermSubmit","a","YouTube","get","q","response","data","items","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e7faf70b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass SeachBar extends React.Component{\r\n    state = { term : \"\"}\r\n\r\n    onInputChage = (event)=>{\r\n        this.setState({term: event.target.value});\r\n    }\r\n\r\n    onFormSubmit =(event)=>{\r\n        event.preventDefault();\r\n        this.props.onFormSubmit(this.state.term);\r\n    }\r\n\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"row\">\r\n                <div className=\"offset-md-3 col-md-6\">\r\n                    <form onSubmit={this.onFormSubmit} className=\"ui form\">\r\n                        <div className=\"form-group\">\r\n                            <input\r\n                                value={this.state.term}\r\n                                type=\"text\" \r\n                                onChange={this.onInputChage} \r\n                                placeholder=\"Search\"\r\n                                className=\"form-control\"\r\n                            />\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SeachBar; ","import axios from 'axios';\r\n\r\nconst KEY = 'AIzaSyCkP3w0zR5rSN8dX8CH2k-qScdcXfq_EIs';\r\n\r\nexport default axios.create({\r\n    baseURL:'https://www.googleapis.com/youtube/v3',\r\n    params:{\r\n        part:'snippet',\r\n        maxresult:'4',\r\n        key:KEY\r\n    }\r\n});","// import './VideoItem.css';\r\nimport React from 'react';\r\n\r\nconst VideoItem = ({video, onVideoSelect}) =>{\r\n    return(\r\n        <div className=\"col col-md-6 col-lg-3\">\r\n            <div onClick={()=>onVideoSelect(video)} className=\"video-item\">\r\n                <img alt={video.snippet.title} className =\"img-fluid\" src={video.snippet.thumbnails.medium.url} />\r\n                <div className =\"content\">\r\n                    <div className =\"header\">{video.snippet.title}</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default VideoItem;","import React from 'react';\r\nimport VideoItem from './videoItem';\r\n\r\n\r\nconst VideoList = ({videos, onVideoSelect}) =>{\r\n    const renderedList = videos.map(video =>{\r\n        return<VideoItem key={video.id.videoId} onVideoSelect={onVideoSelect} video={video}/>;\r\n    });\r\n\r\n    return <div className=\"row\">{renderedList}</div>;\r\n}\r\n\r\nexport default VideoList;","import React from 'react';\r\n\r\nconst VideoDetails = ({video}) =>{\r\n    if(!video){\r\n        return<div>Loading...</div>;\r\n    }\r\n\r\n    const videoSrc = `https://www.youtube.com/embed/${video.id.videoId}`;\r\n    console.log(videoSrc);\r\n\r\n    return(\r\n        <div className=\"videoContainer\">\r\n            <div className=\"row\" >\r\n                <div className=\"col-md-12\">\r\n                    <div class=\"embed-responsive embed-responsive-16by9\">\r\n                        <iframe title=\"Video Title\" class=\"embed-responsive-item\" src= { videoSrc } allowfullscreen></iframe>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {/* <div className=\"ui segment\">\r\n                <h4 className=\"ui header\">{video.snippet.title}</h4>\r\n                <p className=\"\">{video.snippet.description}</p>\r\n            </div> */}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default VideoDetails;","import React from 'react';\nimport './App.css';\nimport SeachBar from './SearchBar';\nimport YouTube from './apis/Youtube';\nimport VideoList from './videoList';\nimport VideoDetails from './videosDetails';\n\nclass App extends React.Component{\n\n  state = {videos : [], selectedVideo:null }\n\n    componentDidMount(){\n      this.onTermSubmit('google pie chart ');\n    }\n\n    onTermSubmit = async (term) =>{\n      const response = await YouTube.get('search/',{\n          params:{\n              q:term\n          }\n      });\n    \n      //console.log(responce.data.items);\n    \n      this.setState({ \n          videos : response.data.items,\n          selectedVideo : response.data.items[0]\n      });\n    } \n\n    onVideoSelect = (video) =>{\n        this.setState({selectedVideo:video});\n    }\n\n  render(){\n    return(\n      <div className=\"App\">\n        <header>\n          <div className=\"container-fluid\"> \n            <SeachBar onFormSubmit={this.onTermSubmit} />\n          </div>\n        </header>\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-md-12\">\n              <VideoDetails video={this.state.selectedVideo} />\n            </div>\n          </div>\n\n          <div className=\"row\">\n            <div className=\"col-md-12\">\n              <div className=\"relativelistMain\">\n                <VideoList onVideoSelect={this.onVideoSelect} videos={this.state.videos} />\n              </div>\n            </div>\n            \n            <div className=\"col-md-12\">\n              <div className=\"latestEpisodeMain\">\n                <h4>Latest Episodes</h4>\n                <VideoList onVideoSelect={this.onVideoSelect} videos={this.state.videos} />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}